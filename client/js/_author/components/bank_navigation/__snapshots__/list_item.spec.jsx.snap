// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bank_assessment component renders the component as a snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <tr
    aria-label="Spec Name"
    className=""
    onClick={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    role="button"
    tabIndex="0"
>
    
</tr>,
  "nodes": Array [
    <tr
      aria-label="Spec Name"
      className=""
      onClick={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      role="button"
      tabIndex="0"
>
      
</tr>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <ListItem
        bank={
                Object {
                        "displayName": Object {
                          "text": "Spec Name",
                        },
                      }
        }
        focused={false}
        onFocus={[Function]}
        selectItem={[Function]}
>
        
</ListItem>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "bank": Object {
            "displayName": Object {
              "text": "Spec Name",
            },
          },
          "children": Array [],
          "focused": false,
          "onFocus": [Function],
          "selectItem": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <tr
          aria-label="Spec Name"
          className=""
          onClick={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          role="button"
          tabIndex="0"
>
          
</tr>,
        "_debugID": 2,
        "_renderedOutput": <tr
          aria-label="Spec Name"
          className=""
          onClick={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          role="button"
          tabIndex="0"
>
          
</tr>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ListItem
    bank={
        Object {
            "displayName": Object {
              "text": "Spec Name",
            },
          }
    }
    focused={false}
    onFocus={[Function]}
    selectItem={[Function]}
>
    
</ListItem>,
}
`;
