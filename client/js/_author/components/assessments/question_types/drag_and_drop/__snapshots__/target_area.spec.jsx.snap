// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`target_area component renders the component as a snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="au-c-drag-and-drop__target-area"
>
    <targetMenu
        addByRegion={[Function]}
        addMenu={null}
        hasTarget={false}
        id={undefined}
        openModal={[Function]}
        toggleAdd={[Function]}
        toggleVisible={[Function]}
        visibleZones={undefined}
    />
    <TargetZone
        editZone={[Function]}
        language="639-2%3AENG%40ISO"
        openModal={[Function]}
        target={Object {}}
        zones={Object {}}
    />
    <EditorUploadModal
        closeModal={[Function]}
        insertMedia={[Function]}
        isOpen={false}
        language="639-2%3AENG%40ISO"
        loading={false}
        localizeStrings={[Function]}
        media={Object {}}
        mediaType="img"
        uploadOnly={false}
    />
</div>,
  "nodes": Array [
    <div
      className="au-c-drag-and-drop__target-area"
>
      <targetMenu
            addByRegion={[Function]}
            addMenu={null}
            hasTarget={false}
            id={undefined}
            openModal={[Function]}
            toggleAdd={[Function]}
            toggleVisible={[Function]}
            visibleZones={undefined}
      />
      <TargetZone
            editZone={[Function]}
            language="639-2%3AENG%40ISO"
            openModal={[Function]}
            target={Object {}}
            zones={Object {}}
      />
      <EditorUploadModal
            closeModal={[Function]}
            insertMedia={[Function]}
            isOpen={false}
            language="639-2%3AENG%40ISO"
            loading={false}
            localizeStrings={[Function]}
            media={Object {}}
            mediaType="img"
            uploadOnly={false}
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <TargetArea
        editZone={[Function]}
        images={Object {}}
        language="639-2%3AENG%40ISO"
        loadingMedia={false}
        question={
                Object {
                        "target": Object {},
                        "zones": Object {},
                      }
        }
        setVisible={[Function]}
        uploadMedia={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": TargetArea {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "editZone": [Function],
          "images": Object {},
          "language": "639-2%3AENG%40ISO",
          "loadingMedia": false,
          "question": Object {
            "target": Object {},
            "zones": Object {},
          },
          "setVisible": [Function],
          "uploadMedia": [Function],
        },
        "refs": Object {},
        "state": Object {
          "addMenu": null,
          "addType": null,
          "showModal": false,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="au-c-drag-and-drop__target-area"
>
          <targetMenu
                    addByRegion={[Function]}
                    addMenu={null}
                    hasTarget={false}
                    id={undefined}
                    openModal={[Function]}
                    toggleAdd={[Function]}
                    toggleVisible={[Function]}
                    visibleZones={undefined}
          />
          <TargetZone
                    editZone={[Function]}
                    language="639-2%3AENG%40ISO"
                    openModal={[Function]}
                    target={Object {}}
                    zones={Object {}}
          />
          <EditorUploadModal
                    closeModal={[Function]}
                    insertMedia={[Function]}
                    isOpen={false}
                    language="639-2%3AENG%40ISO"
                    loading={false}
                    localizeStrings={[Function]}
                    media={Object {}}
                    mediaType="img"
                    uploadOnly={false}
          />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="au-c-drag-and-drop__target-area"
>
          <targetMenu
                    addByRegion={[Function]}
                    addMenu={null}
                    hasTarget={false}
                    id={undefined}
                    openModal={[Function]}
                    toggleAdd={[Function]}
                    toggleVisible={[Function]}
                    visibleZones={undefined}
          />
          <TargetZone
                    editZone={[Function]}
                    language="639-2%3AENG%40ISO"
                    openModal={[Function]}
                    target={Object {}}
                    zones={Object {}}
          />
          <EditorUploadModal
                    closeModal={[Function]}
                    insertMedia={[Function]}
                    isOpen={false}
                    language="639-2%3AENG%40ISO"
                    loading={false}
                    localizeStrings={[Function]}
                    media={Object {}}
                    mediaType="img"
                    uploadOnly={false}
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TargetArea
    editZone={[Function]}
    images={Object {}}
    language="639-2%3AENG%40ISO"
    loadingMedia={false}
    question={
        Object {
            "target": Object {},
            "zones": Object {},
          }
    }
    setVisible={[Function]}
    uploadMedia={[Function]}
/>,
}
`;
