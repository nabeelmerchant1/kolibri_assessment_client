// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`target_menu component renders the component as a snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="au-o-item__top"
    onMouseLeave={[Function]}
>
    <div
        className="au-o-left"
    >
        <div
            className="au-c-question__type"
        >
            Target Image
        </div>
    </div>
    <div
        className="au-o-right"
    >
        <div
            className="au-c-checkbox au-u-ml-md au-u-mr-sm"
        >
            <input
                checked={undefined}
                id="toggle_show_zone_undefined"
                onChange={[Function]}
                tabIndex="0"
                type="checkbox"
            />
            <label
                htmlFor="toggle_show_zone_undefined"
            >
                Show Zones
            </label>
        </div>
        <button
            className="au-c-btn au-c-btn--sm au-c-btn--gray"
            onClick={[Function]}
        >
            Add Image
        </button>
        <addZoneDropdown
            active={false}
            addByImage={[Function]}
            addByRegion={[Function]}
            text="Add Snap Zone"
            toggle={[Function]}
        />
        <addZoneDropdown
            active={false}
            addByImage={[Function]}
            addByRegion={[Function]}
            text="Add Drop Zone"
            toggle={[Function]}
        />
    </div>
</div>,
  "nodes": Array [
    <div
      className="au-o-item__top"
      onMouseLeave={[Function]}
>
      <div
            className="au-o-left"
      >
            <div
                  className="au-c-question__type"
            >
                  Target Image
            </div>
      </div>
      <div
            className="au-o-right"
      >
            <div
                  className="au-c-checkbox au-u-ml-md au-u-mr-sm"
            >
                  <input
                        checked={undefined}
                        id="toggle_show_zone_undefined"
                        onChange={[Function]}
                        tabIndex="0"
                        type="checkbox"
                  />
                  <label
                        htmlFor="toggle_show_zone_undefined"
                  >
                        Show Zones
                  </label>
            </div>
            <button
                  className="au-c-btn au-c-btn--sm au-c-btn--gray"
                  onClick={[Function]}
            >
                  Add Image
            </button>
            <addZoneDropdown
                  active={false}
                  addByImage={[Function]}
                  addByRegion={[Function]}
                  text="Add Snap Zone"
                  toggle={[Function]}
            />
            <addZoneDropdown
                  active={false}
                  addByImage={[Function]}
                  addByRegion={[Function]}
                  text="Add Drop Zone"
                  toggle={[Function]}
            />
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <targetMenu
        addType=""
        addedByRegion={[Function]}
        hasTarget={false}
        openModal={[Function]}
        toggleAdd={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "addType": "",
          "addedByRegion": [Function],
          "hasTarget": false,
          "openModal": [Function],
          "toggleAdd": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="au-o-item__top"
          onMouseLeave={[Function]}
>
          <div
                    className="au-o-left"
          >
                    <div
                              className="au-c-question__type"
                    >
                              Target Image
                    </div>
          </div>
          <div
                    className="au-o-right"
          >
                    <div
                              className="au-c-checkbox au-u-ml-md au-u-mr-sm"
                    >
                              <input
                                        checked={undefined}
                                        id="toggle_show_zone_undefined"
                                        onChange={[Function]}
                                        tabIndex="0"
                                        type="checkbox"
                              />
                              <label
                                        htmlFor="toggle_show_zone_undefined"
                              >
                                        Show Zones
                              </label>
                    </div>
                    <button
                              className="au-c-btn au-c-btn--sm au-c-btn--gray"
                              onClick={[Function]}
                    >
                              Add Image
                    </button>
                    <addZoneDropdown
                              active={false}
                              addByImage={[Function]}
                              addByRegion={[Function]}
                              text="Add Snap Zone"
                              toggle={[Function]}
                    />
                    <addZoneDropdown
                              active={false}
                              addByImage={[Function]}
                              addByRegion={[Function]}
                              text="Add Drop Zone"
                              toggle={[Function]}
                    />
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="au-o-item__top"
          onMouseLeave={[Function]}
>
          <div
                    className="au-o-left"
          >
                    <div
                              className="au-c-question__type"
                    >
                              Target Image
                    </div>
          </div>
          <div
                    className="au-o-right"
          >
                    <div
                              className="au-c-checkbox au-u-ml-md au-u-mr-sm"
                    >
                              <input
                                        checked={undefined}
                                        id="toggle_show_zone_undefined"
                                        onChange={[Function]}
                                        tabIndex="0"
                                        type="checkbox"
                              />
                              <label
                                        htmlFor="toggle_show_zone_undefined"
                              >
                                        Show Zones
                              </label>
                    </div>
                    <button
                              className="au-c-btn au-c-btn--sm au-c-btn--gray"
                              onClick={[Function]}
                    >
                              Add Image
                    </button>
                    <addZoneDropdown
                              active={false}
                              addByImage={[Function]}
                              addByRegion={[Function]}
                              text="Add Snap Zone"
                              toggle={[Function]}
                    />
                    <addZoneDropdown
                              active={false}
                              addByImage={[Function]}
                              addByRegion={[Function]}
                              text="Add Drop Zone"
                              toggle={[Function]}
                    />
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <targetMenu
    addType=""
    addedByRegion={[Function]}
    hasTarget={false}
    openModal={[Function]}
    toggleAdd={[Function]}
/>,
}
`;
